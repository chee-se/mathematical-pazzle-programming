#frozen_string_literal: true

# 円周上に等間隔で並んだ n 個の点を n / 2 本の線分で結んでペアを作る。
# n = 16 のとき、線分が交差しないパターンは何通りあるか。

# ex) n = 6 のとき、以下の5通り。
#   1 2
# 6     3
#   5 4
#
# 1-2, 3-6, 4-5
# 1-2, 3-4, 5-6
# 1-4, 2-3, 5-6
# 1-6, 2-3, 4-5
# 1-6, 2-5, 3-4

module Q22

  # 出題は円周上だが、直線上で考えてよい。山なりの線分で二点を結ぶとき交差しないパターンを数える。
  # 点に左から番号を振って表現する。N=6のとき
  # [1 2 3 4 5 6]
  # 左端の点と i 番目の点を結ぶ事を考える。また、隣り合う n 点を結ぶことを gn とすると
  # n=2のとき、g2 = [1 2] -> [◯ ◯] -> 1
  # n=4のとき、g4 = [1 2 3 4] -> [◯ ◯ g2], [◯ g2 ◯]]-> 1 + 1 = 2
  # n=6のとき、g6 = [1 2 3 4 5 6] -> [◯ ◯ g4], [◯ g2 ◯ g2], [◯ g4 ◯] -> 2 + 1 * 1 + 2 = 5
  # n=8のとき、g8 = [1 2 3 4 5 6 7 8] -> [◯ ◯ g6], [◯ g2 ◯ g4], [◯ g4 ◯ g2], [◯ g6 ◯] -> 5 + 2 + 2 + 5 = 14

  N = 16
  @@memo = Array.new(N)

  def self.main
    puts pair_pattern(N)
  end

  def self.pair_pattern(n)
    return 0 if n % 2 == 1 || n < 0
    return @@memo[n] = 1 if n == 0
    return @@memo[n - 1] unless @@memo[n - 1].nil?

    # 二点を選んで結び、分割されたグループを計算する
    # [◯ 2 3 4 ... i-1 ◯ i + 1 ...]
    @@memo[n - 1] = 2.step(n, 2).sum do |i|
      pair_pattern(i - 2) * pair_pattern(n - i)
    end
    puts "n-1: #{@@memo[n - 1]}"
    @@memo[n - 1]
  end
end

Q22.main
